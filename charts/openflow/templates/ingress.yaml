{{- $domain := print (required "domain required!" .Values.domain) "." (required "domainsuffix required!" .Values.domainsuffix) }}
{{- $apidomain := $domain }}
{{- if .Values.apidomain }}
  {{- $apidomain = print .Values.apidomain "." (required "domainsuffix required!" .Values.domainsuffix) }}
{{- end }}
{{- if eq .Values.openflow.use_openshift_routes true }}
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: openflow-route
spec:
  host: "{{ $apidomain }}"
  port:
    targetPort: 3000 
  to:
    kind: Service
    name: api
  {{- if eq .Values.protocol "https" }}
  tls:
    termination: edge
  {{- end }}
{{- else }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
{{- if eq .Values.protocol "https" }}
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
  {{- if .Values.certificate.tlsSecret }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certresolver }}
    traefik.ingress.kubernetes.io/router.tls.certresolver: {{ .Values.certificate.certresolver | quote }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certmain }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: {{ .Values.certificate.certmain | quote }}
  {{- end }}
  {{- if .Values.certificate.certsans }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.sans: {{ .Values.certificate.certsans | quote }}
  {{- end }}
{{- else }}
    traefik.ingress.kubernetes.io/router.entrypoints: web
{{- end }}
{{- if (eq .Values.openflow.traefik_ipblock true) }}
    traefik.ingress.kubernetes.io/router.middlewares: "{{ .Release.Namespace }}-ipblock@kubernetescrd"
{{- end }}
spec:
  rules:
    - host: "{{ $apidomain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: api
                port:
                  name: www
  {{- if eq .Values.rabbitmq.exposed true }}
    - host: "mq.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: rabbitmq
                port:
                  name: rabbitmq-mgnt
  {{- end }}
  {{- if and .Values.openflow.license_key (eq .Values.grafana.enabled true) }}
    - host: "grafana.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: grafana
                port:
                  name: grafana
  {{- end }}
  {{- if and .Values.openflow.license_key (eq .Values.victoriametrics.enabled true) (eq .Values.victoriametrics.exposed true) }}
    - host: "victoria.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: victoriametrics
                port:
                  name: victoriametrics
  {{- end }}
  {{- if and .Values.certificate.tlsSecret (eq .Values.protocol "https") }}
  tls:
    - secretName: {{ .Values.certificate.tlsSecret | quote }}
  {{- end }}
{{- end }}

{{- if (eq .Values.openflow.traefik_ipblock true) }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: ipblock
spec:
  forwardAuth:
    address: "{{ .Values.protocol }}://ipblock.{{ $domain }}/ipblock/"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ipblock
  annotations:
    kubernetes.io/ingress.class: traefik
{{- if eq .Values.protocol "https" }}
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
  {{- if .Values.certificate.tlsSecret }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certresolver }}
    traefik.ingress.kubernetes.io/router.tls.certresolver: {{ .Values.certificate.certresolver | quote }}
  {{- end }}
  {{- if .Values.certificate.certmain }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: {{ .Values.certificate.certmain | quote }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certsans }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.sans: {{ .Values.certificate.certsans | quote }}
  {{- end }}
{{- else }}
    traefik.ingress.kubernetes.io/router.entrypoints: web
{{- end }}
spec:
  rules:
    - host: "ipblock.{{ $domain }}"
      http:
        paths:
          - path: /ipblock
            pathType: ImplementationSpecific
            backend:
              service:
                name: api
                port:
                  name: www
{{- if .Values.certificate.tlsSecret }}
  tls:
    - secretName: {{ .Values.certificate.tlsSecret }}
{{- end }}


{{- end }}
---
{{- if or (and (.Values.openflow.license_key) (or (eq .Values.jaeger.exposed true) (eq .Values.zipkin.enabled true))) (eq .Values.rediscommander.exposed true) }}
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: dashboardauth
spec:
  forwardAuth:
    address: "https://{{ $apidomain }}/dashboardauth"
---
{{- if or (and (eq .Values.jaeger.enabled true) (eq .Values.jaeger.exposed true)) (and (eq .Values.zipkin.enabled true) (eq .Values.zipkin.exposed true)) (and (eq .Values.rediscommander.enabled true) (eq .Values.rediscommander.exposed true)) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
{{- if eq .Values.protocol "https" }}
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
  {{- if .Values.certificate.tlsSecret }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certresolver }}
    traefik.ingress.kubernetes.io/router.tls.certresolver: {{ .Values.certificate.certresolver | quote }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certmain }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: {{ .Values.certificate.certmain | quote }}
  {{- end }}
  {{- if .Values.certificate.certsans }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.sans: {{ .Values.certificate.certsans | quote }}
  {{- end }}
{{- else }}
    traefik.ingress.kubernetes.io/router.entrypoints: web
{{- end }}
    traefik.ingress.kubernetes.io/router.middlewares: "{{ .Release.Namespace }}-dashboardauth@kubernetescrd"
spec:
  rules:
  {{- if and (eq .Values.rediscommander.enabled true) (eq .Values.rediscommander.exposed true) }}
    - host: "redis.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: rediscommander
                port:
                  name: rediscommander
  {{- end }}
  {{- if and .Values.openflow.license_key (eq .Values.jaeger.enabled true) (eq .Values.jaeger.exposed true) }}
    - host: "jaeger.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: openflow-jaeger-query
                port:
                  name: query
  {{- end }}
  {{- if and .Values.openflow.license_key (eq .Values.zipkin.enabled true) (eq .Values.zipkin.exposed true) }}
    - host: "zipkin.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: zipkin
                port:
                  name: zipkin
  {{- end }}
{{- end }}
{{- end }}
---

{{- if eq .Values.openflow.use_openshift_routes true }}
{{- else }}

  {{ $ingress := (lookup "networking.k8s.io/v1" "Ingress" .Release.Namespace "useringress") }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: useringress
  annotations:
    kubernetes.io/ingress.class: traefik
{{- if eq .Values.protocol "https" }}
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
  {{- if .Values.certificate.tlsSecret }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certresolver }}
    traefik.ingress.kubernetes.io/router.tls.certresolver: {{ .Values.certificate.certresolver | quote }}
  {{- end }}
  {{- if .Values.certificate.certmain }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: {{ .Values.certificate.certmain | quote }}
    traefik.ingress.kubernetes.io/router.tls: "true"
  {{- end }}
  {{- if .Values.certificate.certsans }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.sans: {{ .Values.certificate.certsans | quote }}
  {{- end }}
{{- else }}
    traefik.ingress.kubernetes.io/router.entrypoints: web
{{- end }}
spec:
  rules:
    - host: "random.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: api
                port:
                  name: www
  {{ if $ingress }}
    {{- range $k, $v := (lookup "networking.k8s.io/v1" "Ingress" .Release.Namespace "useringress").spec.rules }}
      {{ if ne $k 0 }}
    - host: {{ $v.host }}
      http:
        paths:
          {{- range $k1, $v1 := $v.http.paths }}
          - path: {{ $v1.path }}
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{$v1.backend.service.name }} 
                port:
                  name: www
          {{- end }}
      {{ end }}
    {{ end }}
  {{ end }}
  {{- if .Values.certificate.tlsSecret }}
  tls:
    - secretName: {{ .Values.certificate.tlsSecret }}
  {{- end }}
---
  {{- if eq .Values.grpc.exposed true }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grpc-ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
    ingress.kubernetes.io/protocol: h2c
    # ingress.kubernetes.io/protocol: h2c
  {{- if eq .Values.protocol "https" }}
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    {{- if .Values.certificate.tlsSecret }}
    traefik.ingress.kubernetes.io/router.tls: "true"
    {{- end }}
    {{- if .Values.certificate.certresolver }}
    traefik.ingress.kubernetes.io/router.tls.certresolver: {{ .Values.certificate.certresolver | quote }}
    traefik.ingress.kubernetes.io/router.tls: "true"
    {{- end }}
    {{- if .Values.certificate.certmain }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: {{ .Values.certificate.certmain | quote }}
    {{- end }}
    {{- if .Values.certificate.certsans }}
    traefik.ingress.kubernetes.io/router.tls.domains.0.sans: {{ .Values.certificate.certsans | quote }}
    {{- end }}
  {{- else }}
    traefik.ingress.kubernetes.io/router.entrypoints: web
  {{- end }}
  {{- if (eq .Values.openflow.traefik_ipblock true) }}
    traefik.ingress.kubernetes.io/router.middlewares: "{{ .Release.Namespace }}-ipblock@kubernetescrd"
  {{- end }}
spec:
  rules:
    - host: "grpc.{{ $apidomain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: api-grpc
                port:
                  name: grpc
  {{- if (ne $apidomain $domain) }}
    - host: "grpc.{{ $domain }}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: api-grpc
                port:
                  name: grpc
  {{- end }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingressroute.grpc
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`grpc2.{{$domain}}`)
      kind: Rule
      services:
        - name: api-grpc
          port: {{ .Values.grpc.internalport }}
          scheme: h2c
  {{- end }}

{{- end }}

