{{- if and .Values.openflow.license_key (eq .Values.exporter.enabled true) }}
{{- $domain := print (required "domain required!" .Values.domain) "." (required "domainsuffix required!" .Values.domainsuffix) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  labels:
    app: opentelemetry
data:
  otel-collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
            cors_allowed_origins:
            - http://*
            - https://*
    processors:
      batch:
    extensions:
      health_check: {}
      zpages: {}
    exporters:
      jaeger:
        endpoint: jaeger:14250
        insecure: true
      zipkin:
        endpoint: "http://zipkin:9411/api/v2/spans"
        format: proto
      logging:
       loglevel: debug
      prometheus:
       endpoint: "0.0.0.0:9464"
      #  namespace: otelcollector
      prometheusremotewrite:
        endpoint: "http://victoriametrics:8428/api/v1/write"
    service:
      extensions: [health_check, zpages]
      pipelines:
        metrics:
          receivers: [otlp]
          exporters: [prometheusremotewrite]
          processors: []
        traces:
          receivers: [otlp]
          processors: [batch]
{{- if and (eq .Values.jaeger.enabled true) (eq .Values.zipkin.enabled true) }}
          exporters: [jaeger, zipkin]
{{- else if and (eq .Values.jaeger.enabled true) (eq .Values.zipkin.enabled false) }}
          exporters: [jaeger]
{{- else if and (eq .Values.jaeger.enabled false) (eq .Values.zipkin.enabled true) }}
          exporters: [zipkin]
{{- else }}
          exporters: []
{{- end }}

          
#        traces:
#          receivers: [otlp]
#          exporters: [jaeger]
#          exporters: [jaeger,logging]
#          exporters: [prometheus]
#        endpoint: "/api/prom/push"
#        endpoint: "/api/v1/write"
# prometheus:
#     config:
#       scrape_configs:
#         - job_name: 'otel-collector'
#           scrape_interval: 5s
#           static_configs:
#             - targets: [ 'localhost:55681' ]
# https://opentelemetry.io/docs/collector/configuration/#exporters

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  labels:
    app: opentelemetry
spec:
  type: NodePort
  ports:
    - name: otlp # Default endpoint for OpenTelemetry receiver.
      port: 55680
      protocol: TCP
      targetPort: 55680
    - name: jaeger-grpc # Default endpoint for Jaeger gRPC receiver
      port: 14250
    - name: jaeger-thrift-http # Default endpoint for Jaeger HTTP receiver.
      port: 14268
    # - name: zipkin # Default endpoint for Zipkin receiver.
    #   port: 9411
    - name: metrics # Default endpoint for querying metrics.
      port: 8888
    - name: prometheus # Default endpoint for querying metrics.
      port: 9464
    - name: collector # Default endpoint for querying metrics.
      port: 55681
    - name: newport
      port: 4317
  selector:
    app: opentelemetry
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  labels:
    app: opentelemetry
spec:
  selector:
    matchLabels:
      app: opentelemetry
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 
  template:
    metadata:
      labels:
        app: opentelemetry
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - command:
            - "/otelcol"
            - "--config=/conf/otel-collector-config.yaml"
            #           Memory Ballast size should be max 1/3 to 1/2 of memory.
            - "--mem-ballast-size-mib=683"
            - "--log-level=DEBUG"
          # image: otel/opentelemetry-collector-dev:latest
          resources:
            {{- toYaml .Values.exporter.resources | nindent 12 }}
          image: otel/opentelemetry-collector
          name: otel-collector
          ports:
            - containerPort: 55679 # Default endpoint for ZPages.
            - containerPort: 55680 # Default endpoint for OpenTelemetry receiver.
            - containerPort: 14250 # Default endpoint for Jaeger HTTP receiver.
            - containerPort: 14268 # Default endpoint for Jaeger HTTP receiver.
            # - containerPort: 9411 # Default endpoint for Zipkin receiver.
            - containerPort: 8888 # Default endpoint for querying metrics.
            - containerPort: 9464 # Prometheus exporter metrics
            - containerPort: 55681 # Collector port
            - containerPort: 4317 # new port
          volumeMounts:
            - name: otel-collector-config-vol
              mountPath: /conf
          #        - name: otel-collector-secrets
          #          mountPath: /secrets
          livenessProbe:
            httpGet:
              path: /
              port: 13133 # Health Check extension default port.
          readinessProbe:
            httpGet:
              path: /
              port: 13133 # Health Check extension default port.
      volumes:
        - configMap:
            name: otel-collector-conf
            items:
              - key: otel-collector-config
                path: otel-collector-config.yaml
          name: otel-collector-config-vol
#        - secret:
#            name: otel-collector-secrets
#            items:
#              - key: cert.pem
#                path: cert.pem
#              - key: key.pem
#                path: key.pem
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingressroute.otel
spec:
  entryPoints:
    - web
    - otlp
  routes:
    - match: Host(`otel.{{$domain}}`)
      kind: Rule
      services:
        - name: otel-collector
          port: 4317
          scheme: h2c
{{- end }}
---
{{- if and .Values.openflow.license_key (eq .Values.jaeger.enabled true) }}
  {{- if eq .Values.jaeger.ephemeral false }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jaeger-storage
  annotations:
    helm.sh/resource-policy: "keep"
  labels:
    app: jaeger
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  labels:
    name: jaeger
spec:
  type: NodePort
  ports:
    - port: 14250
      targetPort: 14250
      name: jaeger
    - port: 16686
      targetPort: 16686
      name: jaegerui
  selector:
    app: jaeger
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    environment: production
    app: jaeger
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        environment: production
        app: jaeger
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: jaeger
          image: jaegertracing/all-in-one
          imagePullPolicy: IfNotPresent
          resources:
            {{- toYaml .Values.jaeger.resources | nindent 12 }}
          env:
            - name: SPAN_STORAGE_TYPE
              value: "badger"
            - name: BADGER_EPHEMERAL
              value: {{ .Values.jaeger.ephemeral | quote }}
            - name: BADGER_DIRECTORY_VALUE
              value: "/badger/data"
            - name: BADGER_DIRECTORY_KEY
              value: "/badger/key"
  {{- if eq .Values.jaeger.ephemeral false }}
          volumeMounts:
            - mountPath: /badger
              name: jaeger-storage
              subPath: badger
  {{- end }}
          ports:
            - containerPort: 14250
              name: jaeger
              protocol: TCP
            - containerPort: 16686
              name: jaegerui
              protocol: TCP
  {{- if eq .Values.jaeger.ephemeral false }}
      volumes:
        - name: jaeger-storage
          persistentVolumeClaim:
            claimName: jaeger-storage
  {{- end }}
{{- end }}



