{{- if eq .Values.architecture "standalone" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-conf-map
data:
  config.sh: |
      sleep 5

      cat <<EOT > /tmp/abc-script.js
      if(JSON.stringify(rs.status()).indexOf("no replset config has been received") > -1) {
          config = {
          "_id" : "$replica_set",
          "members" : [  {"_id" : 0, "host":"$(hostname):27017"} ]
          };
          console.log(config);
          rs.initiate(config)
      } else {
          config = {
          "_id" : "$replica_set",
          "members" : [  {"_id" : 0, "host":"$(hostname):27017"} ]
          };
          rs.reconfig(config, {force: true})
      }
      rs.status();
      EOT

      mongosh admin --quiet /tmp/abc-script.js

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy: {}
  template:
    metadata:
      labels:
        app: mongo
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      containers:
      - image: mongo
        name: mongo
        # add support for keyFile later ? https://github.com/docker-library/mongo/issues/211
        args: ["--dbpath","/data/db", "--replSet", {{ .Values.rsname | quote }}]
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - >
                if [ ! -f /data/db/admin-user.lock ]; then
                  sleep 5;
                  mongosh --eval "if(JSON.stringify(rs.status()).indexOf('no replset config has been received') > -1) { config = {'_id' : '$replica_set','members' : [  {'_id' : 0, 'host':'$(hostname):27017'} ]}; rs.initiate(config) } else { config = { '_id' : '$replica_set', 'members' : [  {'_id' : 0, 'host':'$(hostname):27017'} ] }; rs.reconfig(config, {force: true}) }"
                  touch /data/db/admin-user.lock;
                fi;
        # livenessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        # readinessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        env:
        - name: replica_set
          value: {{ .Values.rsname | quote }}
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-creds
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-creds
              key: password
        volumeMounts:
        - name: mongo-conf
          mountPath: /data/conf
        - name: "mongo-data-dir"
          mountPath: "/data/db"
      volumes:
      - name: "mongo-data-dir"
        persistentVolumeClaim:
          claimName: "mongo-data"
      - name: mongo-conf
        configMap:
          name: mongo-conf-map
          items:
            - key: config.sh
              path: config.sh
        
{{- end }}