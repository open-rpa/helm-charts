apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-user
  namespace: {{.Release.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mongo-role
rules:
- apiGroups: ["*"]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mongo-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mongo-role
subjects:
- kind: ServiceAccount
  name: mongo-user
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  replicas: {{ .Values.replicas }}
  serviceName: "mongo" # match headless service name
  template:
    metadata:
      labels:
        app: mongo
    spec:
      serviceAccountName: mongo-user
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 12 }}
      {{- end }}
      containers:
      - name: mongo
        image: mongo
        imagePullPolicy: Always
        ports:
          - containerPort: 27017
            name: mongo
        # command: ["/bin/sh"]
        # args: ["-c", "while true; do echo hello; sleep 10;done"]
        args: 
        # - "-c"
        # - "/usr/local/bin/docker-entrypoint.sh"
        - "--dbpath"
        - "/data/db"
        - "--replSet" 
        - {{ .Values.rsname | quote }}
        {{- if .Values.auth.enabled }}
        - "--keyFile"
        - "/data/db/mongodb.key"
        {{- end }}
        env:
          {{- if .Values.auth.enabled }}
          - name: MONGO_INITDB_ROOT_USERNAME
            value: {{ .Values.auth.adminuser | quote }}
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: adminpass
          {{- end }}
        # livenessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        # readinessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /data/db
      - name: mongo-sidecar
        image: openiap/mongo-k8s-sidecar
        imagePullPolicy: Always
        # command: ["/bin/sh"]
        # args: ["-c", "while true; do echo hello; sleep 10;done"]
        env:
          - name: MONGO_SIDECAR_POD_LABELS
            value: "app=mongo"
          - name: MONGODB_AUTH_DATABASE
            value: {{ .Values.auth.authdb | quote }}
          - name: MONGODB_RSNAME
            value: {{ .Values.rsname | quote }}
          - name: KUBE_NAMESPACE
            value: {{.Release.Namespace | quote }}
          {{- if and .Values.service.domainprefix (ge (len .Values.service.external) 0) }}
          - name: EXTERNAL_DOMAIN
            value: {{.Values.service.domainprefix}}
          {{- end }}
          {{- if .Values.addservicename  }}
          - name: KUBERNETES_MONGO_SERVICE_NAME
            value: "mongo"
          {{- end }}
          {{- if .Values.auth.enabled }}
          - name: MONGODB_KEYFILE
            value: "/data/db/mongodb.key"
          - name: MONGODB_KEYFILEUID
            value: "999"
          - name: MONGODB_KEYFILEGID
            value: "999"
          - name: MONGODB_USERNAME
            value: {{ .Values.auth.adminuser | quote }}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: adminpass
          - name: MONGODB_KEYFILE_CONTENT
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: key
          {{- end }}
          {{- if and .Values.auth.initdb .Values.auth.username .Values.auth.password }}
          - name: MONGODB_INITDB_ROLE
            value: {{ .Values.auth.initdbrole | quote }}
          - name: MONGODB_INITDB
            value: {{ .Values.auth.initdb | quote }}
          - name: MONGODB_INITDB_AUTH_Db
            value: {{ .Values.auth.initdb | quote }}
          - name: MONGODB_INITDB_USERNAME
            value: {{ .Values.auth.username | quote }}
          - name: MONGODB_INITDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: password

          {{- end }}
        volumeMounts:
        - name: data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: mongo
      annotations:
    {{- if .Values.persistence.preserve }}
        helm.sh/resource-policy: "keep"
    {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
    {{- if .Values.persistence.storageclass }}
        storageClassName: {{ .Values.persistence.storageclass | quote }}
    {{- end }}
        requests:
          storage: {{ .Values.persistence.size }}
