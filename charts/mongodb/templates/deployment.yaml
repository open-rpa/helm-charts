apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-user
  namespace: {{.Release.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mongo-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
- kind: ServiceAccount
  name: mongo-user
  namespace: {{.Release.Namespace}}
---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: mongo-conf-map
# data:
#   config.sh: |
#       sleep 5

#       cat <<EOT > /tmp/abc-script.js
#       var hasrepl = false;
#       var replicas = {{ .Values.replicas }};
#       config = {
#       "_id" : {{ .Values.rsname | quote }},
#       "members" : []
#       };
#       for(var i=0; i < replicas; i++) {
#         config.members.push({"_id" : i, "host":"mongo-" + i + ".mongo:27017"});
#       }
#       try {
#         const rplStatus = db.adminCommand({ replSetGetStatus : 1 });
#         hasrepl = true;
#       } catch (e) {
#       }
#       console.log(config);
#       if(!hasrepl) {
#           rs.initiate(config)
#       } else {
#           // rs.reconfig(config, {force: true})
#       }

#       rs.status();
#       EOT

#       mongosh admin --quiet /tmp/abc-script.js

# ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  serviceName: "mongo"
  selector:
    matchLabels:
      app: mongo
  replicas: {{ .Values.replicas }}
  serviceName: "mongo" # match headless service name
  template:
    metadata:
      labels:
        app: mongo
    spec:
      serviceAccountName: mongo-user
      containers:
      - name: mongo
        image: mongo
        imagePullPolicy: Always
        args: ["--dbpath","/data/db", "--replSet", {{ .Values.rsname | quote }}]
        # livenessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        # readinessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
      # volumes:
      #   - name: mongo-conf
      #     configMap:
      #       name: mongo-conf-map
      #       items:
      #         - key: config.sh
      #           path: config.sh
      - name: mongo-sidecar
        image: cloudhack/openflow:mongo-k8s-sidecar
        imagePullPolicy: Always
        env:
          - name: MONGO_SIDECAR_POD_LABELS
            value: "app=mongo"
          - name: KUBERNETES_MONGO_SERVICE_NAME
            value: "mongo"
          - name: KUBE_NAMESPACE
            value: "{{.Release.Namespace}}"
            
        # lifecycle:
        #   postStart:
        #     exec:
        #       command:
        #       - /bin/sh
        #       - /data/conf/config.sh
        volumeMounts:
        # - name: mongo-conf
        #   mountPath: /data/conf
        - name: data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
        helm.sh/resource-policy: "keep"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
  {{- if .Values.persistence.storageclass }}
      storageClassName: "{{ .Values.persistence.storageclass }}"
  {{- end }}
