{{- $dot := . }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "common.name" $dot }}-user
  namespace: {{.Release.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "common.name" $dot }}-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "common.name" $dot }}-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "common.name" $dot }}-role
subjects:
- kind: ServiceAccount
  name: {{ include "common.name" $dot }}-user
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.name" $dot }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.name" $dot }}
      service: {{ include "common.name" $dot }}
  replicas: {{ .Values.replicas }}
  serviceName: "{{ include "common.name" $dot }}" # match headless service name
  template:
    metadata:
      labels:
        app: {{ include "common.name" $dot }}
        service: {{ include "common.name" $dot }}
    spec:
      serviceAccountName: {{ include "common.name" $dot }}-user
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 12 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: 
        {{- toYaml .Values.imagePullSecrets | nindent 12 }}
      {{- end }}      
      containers:
      - name: {{ include "common.name" $dot }}
        image: {{ .Values.image | quote }}
        imagePullPolicy: Always
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        ports:
          - containerPort: 27017
            name: mongo
{{- if .Values.debugmongodb }}
        command: ["/bin/sh"]
        args: ["-c", "while true; do echo hello; sleep 10;done"]
{{- else }}        
        args: 
        # - "-c"
        # - "/usr/local/bin/docker-entrypoint.sh"
        {{- if .Values.tls.enabled }}
        - "--tlsMode"
        - {{ .Values.tls.mode | quote }}
        - "--tlsCertificateKeyFile"
        - {{ .Values.tls.certfile | quote }}
          {{- if .Values.tls.certpassword }}
        - "--tlsCertificateKeyFilePassword"
        - {{ .Values.tls.certpassword | quote }}
         {{- end }}
         {{- if .Values.tls.addcafilearg }}
        - "--tlsCAFile"
        - {{ .Values.tls.cafile | quote }}
        {{- end }}
        {{- end }}
        - "--dbpath"
        - "/data/db"
        - "--replSet" 
        - {{ .Values.rsname | quote }}
        {{- if .Values.auth.enabled }}
        - "--keyFile"
        - "/data/db/mongodb.key"
        {{- end }}
        env:
          {{- if .Values.auth.enabled }}
          - name: MONGO_INITDB_ROOT_USERNAME
            value: {{ .Values.auth.adminuser | quote }}
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: adminpass
          {{- end }}
{{- end }}
        # livenessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        # readinessProbe:
        #   exec:
        #     command:
        #       - mongosh
        #       - --eval
        #       - "db.adminCommand('ping')"
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /data/db
      - name: sidecar
        image: {{ .Values.sidecarimage | quote }}
        imagePullPolicy: Always
{{- if .Values.debugsidecar }}
        command: ["/bin/sh"]
        args: ["-c", "while true; do echo hello; sleep 10;done"]
{{- end }}
        env:
          - name: MONGO_SIDECAR_POD_LABELS
            value: "app={{ include "common.name" $dot }}"
          - name: MONGO_SIDECAR_ARBITER_LABELS
            value: "app={{ include "common.arbitername" $dot }}"
          - name: MONGODB_AUTH_DATABASE
            value: {{ .Values.auth.authdb | quote }}
          - name: MONGO_SIDECAR_UNHEALTHY_SECONDS
            value: {{ .Values.sidecar_unhealthy_seconds | quote }}
          - name: MONGODB_RSNAME
            value: {{ .Values.rsname | quote }}
          - name: KUBE_NAMESPACE
            value: {{ .Release.Namespace | quote }}
            # if .Values.tls.enabled and .Values.ingress.enabled
          {{- if and .Values.tls.enabled .Values.ingress.enabled }}
          - name: EXTERNAL_PORT
            value: {{ .Values.ingress.externalport | quote }}
          {{- end }}
          {{- if .Values.tls.enabled }}
          - name: TLS_SELFSIGN
            value: {{ .Values.tls.selfsigned | quote }}
          - name: TLS_KEYFILE
            value: {{ .Values.tls.certfile | quote }}
            {{- if .Values.tls.ca_private }}
          - name: TLS_CA_PRIVATE
            value: {{ .Values.tls.ca_private | quote }}
            {{- end }}
            {{- if .Values.tls.ca_cert }}
          - name: TLS_CA_CERT
            value: {{ .Values.tls.ca_cert | quote }}
            {{- end }}
            {{- if .Values.tls.certpassword }}
          - name: TLS_KEYPASSWORD
            value: {{ .Values.tls.certpassword | quote }}
            {{- end }}
          - name: TLS_CAFILE
            value: {{ .Values.tls.cafile | quote }}
          - name: TLS_DNS_HOSTS
            value: {{ .Values.tls.dns_hosts | quote }}
          {{- end }}
          {{- if (and .Values.ingress.domainprefix .Values.ingress.enabled) }}
          - name: EXTERNAL_DOMAIN
            value: {{.Values.ingress.domainprefix}}
          {{- else if and .Values.service.domainprefix (gt (len .Values.service.external) 0) }}
          - name: EXTERNAL_DOMAIN
            value: {{.Values.service.domainprefix}}
          {{- end }}
          {{- if .Values.addservicename  }}
          - name: KUBERNETES_MONGO_SERVICE_NAME
            value: "{{ include "common.name" $dot }}"
          {{- end }}
          - name: MONGO_AUTH_ENABLED
            value: {{ .Values.auth.enabled | quote }}
          - name: MONGODB_USERNAME
            value: {{ .Values.auth.adminuser | quote }}
          {{- if .Values.auth.adminpass }}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: adminpass
          {{- end }}
          {{- if .Values.auth.enabled }}
          - name: MONGODB_KEYFILE
            value: "/data/db/mongodb.key"
          - name: MONGODB_KEYFILEUID
            value: "999"
          - name: MONGODB_KEYFILEGID
            value: "999"
          - name: MONGODB_KEYFILE_CONTENT
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: key
          {{- end }}
          {{- if and .Values.auth.initdb .Values.auth.username .Values.auth.password }}
          - name: MONGODB_INITDB_ROLE
            value: {{ .Values.auth.initdbrole | quote }}
          - name: MONGODB_INITDB
            value: {{ .Values.auth.initdb | quote }}
          - name: MONGODB_INITDB_AUTH_Db
            value: {{ .Values.auth.initdb | quote }}
          - name: MONGODB_INITDB_USERNAME
            value: {{ .Values.auth.username | quote }}
          - name: MONGODB_INITDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: password

          {{- end }}
        volumeMounts:
        - name: data
          mountPath: /data/db
    {{- if .Values.exporter.enabled }}
      - name: exporter
        image: {{ .Values.exporter.image | quote }}
        imagePullPolicy: Always
        args: ["--mongodb.uri={{ include "mongodb.mongodblocalurl" $dot }}"]
        env:
          - name: MONGOD_EXPORTER_FLAGS
            value: {{ .Values.exporter.flags | quote }}
        ports:
          - containerPort: 9216
            name: metrics
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ include "common.name" $dot }}
        service: {{ include "common.name" $dot }}
      annotations:
    {{- if .Values.persistence.preserve }}
        helm.sh/resource-policy: "keep"
    {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
    {{- if .Values.persistence.storageclass }}
      storageClassName: {{ .Values.persistence.storageclass | quote }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
---
{{ if and (.Values.arbiter.enabled) (gt (.Values.arbiter.replicas| int) 0) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.arbitername" $dot }}
spec:
  selector:
    matchLabels:
      app: {{ include "common.arbitername" $dot }}
      service: {{ include "common.name" $dot }}
  replicas: {{ .Values.arbiter.replicas }}
  serviceName: "{{ include "common.arbitername" $dot }}"
  template:
    metadata:
      labels:
        app: {{ include "common.arbitername" $dot }}
        service: {{ include "common.name" $dot }}
    spec:
      serviceAccountName: {{ include "common.name" $dot }}-user
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 12 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: 
        {{- toYaml .Values.imagePullSecrets | nindent 12 }}
      {{- end }}      
      containers:
      - name: {{ include "common.arbitername" $dot }}
        image: {{ .Values.image | quote }}
        imagePullPolicy: Always
        ports:
          - containerPort: 27017
            name: mongo
{{- if .Values.debugmongodb }}
        command: ["/bin/sh"]
        args: ["-c", "while true; do echo hello; sleep 10;done"]
{{- else }}        
        args: 
        - "--dbpath"
        - "/data/db"
        - "--replSet" 
        - {{ .Values.rsname | quote }}
        {{- if .Values.auth.enabled }}
        - "--keyFile"
        - "/data/db/mongodb.key"
        {{- end }}
        {{- if .Values.tls.enabled }}
        - "--tlsMode" 
        - {{ .Values.tls.mode | quote }}
        - "--tlsCertificateKeyFile"
        - {{ .Values.tls.certfile | quote }}
          {{- if .Values.tls.certpassword }}
        - "--tlsCertificateKeyFilePassword"
        - {{ .Values.tls.certpassword | quote }}
         {{- end }}
         {{- if .Values.tls.addcafilearg }}
        - "--tlsCAFile"
        - {{ .Values.tls.cafile | quote }}
        {{- end }}
        {{- end }}
{{- end }}
        env:
          {{- if .Values.auth.enabled }}
          - name: MONGO_INITDB_ROOT_USERNAME
            value: {{ .Values.auth.adminuser | quote }}
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: adminpass
          {{- end }}
        volumeMounts:
        - name: data
          mountPath: /data/db
      - name: sidecar
        image: {{ .Values.sidecarimage | quote }}
        imagePullPolicy: Always
{{- if .Values.debugsidecar }}
        command: ["/bin/sh"]
        args: ["-c", "while true; do echo hello; sleep 10;done"]
{{- end }}
        env:
          - name: MONGODB_IS_ARBITER
            value: "1"
          - name: MONGO_AUTH_ENABLED
            value: {{ .Values.auth.enabled | quote }}
          {{- if .Values.tls.enabled }}
          - name: TLS_SELFSIGN
            value: {{ .Values.tls.selfsigned | quote }}
          - name: TLS_KEYFILE
            value: {{ .Values.tls.certfile | quote }}
            {{- if .Values.tls.ca_private }}
          - name: TLS_CA_PRIVATE
            value: {{ .Values.tls.ca_private | quote }}
            {{- end }}
            {{- if .Values.tls.ca_cert }}
          - name: TLS_CA_CERT
            value: {{ .Values.tls.ca_cert | quote }}
            {{- end }}
            {{- if .Values.tls.certpassword }}
          - name: TLS_KEYPASSWORD
            value: {{ .Values.tls.certpassword | quote }}
            {{- end }}
          - name: TLS_CAFILE
            value: {{ .Values.tls.cafile | quote }}
          - name: TLS_DNS_HOSTS
            value: {{ .Values.tls.dns_hosts | quote }}
          {{- end }}
          - name: MONGODB_KEYFILE
            value: "/data/db/mongodb.key"
          - name: MONGODB_KEYFILEUID
            value: "999"
          - name: MONGODB_KEYFILEGID
            value: "999"
          - name: MONGODB_KEYFILE_CONTENT
            valueFrom:
              secretKeyRef:
                name: "mongo-creds"
                key: key
        volumeMounts:
        - name: data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ include "common.arbitername" $dot }}
        service: {{ include "common.name" $dot }}
      annotations:
    {{- if .Values.persistence.preserve }}
        helm.sh/resource-policy: "keep"
    {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
    {{- if .Values.persistence.storageclass }}
        storageClassName: {{ .Values.persistence.storageclass | quote }}
    {{- end }}
        requests:
          storage: {{ .Values.arbiter.size }}
{{- end }}
