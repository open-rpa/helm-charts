nameOverride: 
rsname: rs0
image: mongo
sidecarimage: openiap/mongo-k8s-sidecar
nodeSelector: {}
resources: {}
imagePullSecrets: 
# This needs to be 1, 3 or higher
# Sometimes you want to run a replicate set with only one node. sure, fine .. go ahead
# but if you add 2 for redundancy you will have issues, since voting cannot happen with at least 2 nodes UP
# meaning if only 2 nodes are there, and one restarts both become secondary and noone gets elected primary
replicas: 3
# This is the max unavailable setting for the pod disruption budget
# The default value of 1 will make sure that kubernetes won't allow more than 1
# of your pods to be unavailable during maintenance
maxUnavailable: 1
addservicename: true
mongodbPort: 27017
debugmongodb: false
debugsidecar: false
sidecar_unhealthy_seconds: # 15
log:
  quiet: true
profiler:
  profile: 0 # 0 - off / 1 - use slowms and slowOpSampleRate / 2 - collects data for all operations
  slowms: 250
  slowOpSampleRate: 1 # between 0 and 1, The fraction of slow operations that should be profiled or logged
arbiter:
  enabled: false
  replicas: 1 
  size: 1Gi
exporter:
  enabled: false
  image: percona/mongodb_exporter:0.20
  flags: # add ekstra flags, like --compatible-mode -mongodb.direct-connect=true --mongodb.global-conn-pool --mongodb.collstats-colls=mydb.* --mongodb.indexstats-colls=mydb.* --discovering-mode
persistence:
  size: 2Gi
  storageclass:
  preserve: true
auth:
  # by default no authentication is setup
  # To use auth in a replicateset we need to set adminuser and adminpass, and we also need to add a a keyfile (key field below)
  enabled: false
  adminuser: 
  adminpass: 
  authdb: admin
  # to create a non admin user in a dedicated db ( not using admin as authentication database )
  # fillout the 3 below fields.
  initdb: 
  username: 
  password: 
  # By default this use will be added to readWrite .. You can change the default role here ( only one role is supported right now )
  initdbrole: readWrite
  # To generate one your slef use: openssl rand -base64 756
  key: D3vzi4V4znL2WrDcWX6MWOi3NvH0sSeYp9pyHTw9Tmgi3q6ljn62qMLPAz4VHHRMER/6A4rFPM3PlVQ5WSx8zD+OFMwuJOZQ8hiQSqz312pBFvm3geV/i5bc42nm9XAM2MaDUIKugRT8a0G4qgJLSYhDlwKYnD09DKeRvbEQ5USt41nzF+Ki72vKmz4qDS8hKDBq4P2TWBbUTKwkBKOLf4CCpCF/9DMZszj61L8P6Dl7rFkSW3b5cN2VOBwREMVPdCHqf4J7PueiWvOHDdMXNcOLvTLKN+R0GFr/TFwnoAlMGj1hgWj0BrfrZM967wIvyaqs/8QoaQlwLB73lZSFgE/TN38fEYYmraQ56naGP24EeEDjMl6HZQLnSxySykjuiYnd9Xk+NqdXhc1fIty2rPyAehJ4yWDsynnWQaA91nSo2k24cHO5OKYqR4eZmDwpLo/5kj48AlvOgCmZ6Uq5x47KJJrR6fxmBGbvMg5GmK5GNXnJKzzSzi3BzoB7bSHW/lE1bnpNKr9A5BQml1P6C4DkUTRJamRQHGB9yainxeynFcq22D7FgDvqnJLkKgE1gm51w8URMRI+Hh7EbffQoAJI82pvyKSCRi1NX5O55AZjKVYURkeVwe02fNveIDj05agZpfIZly0G8WLzTiiNf6dxa24YFUjPBu2Cq6PlGQRx5SE2/U8S+6IRKo1mV+fuTu5vqcYKFrkYEDamzYit62Pwh0hjpj8RX5qvRMBgCnk5mfZs8vijGa1TUm7RIiJBpLjySD7wwWiir+E9Dm6JJOdIX0YIHYRrWvi3cxRmTT6ZeONMOo7+tTitysBtkGzpl5pf0qehvi0qy6W8wCgYWbdHo9PpHFLbLz7bVsyZLNxa4cLs5C43e1Gk34QXwmOA6OzimBSq1GrKp+gM0sQhuCgAsM2nsyzOt1CESegnjRhwkkgWl/9QpDfdmlN1dFvaSybYuaQA1QZYuzJ8acHohP/q6r9l
tls:
  enabled: false
  # mode: disabled, allowTLS ( noone use tls, but can ) preferTLS ( mongod use tls, clients dont, but can ) requireTLS ( all use tls )
  mode: preferTLS
  selfsigned: true
  certfile: /data/db/cert.pem
  keypassword: 
  addcafilearg: false # if enabled mongod will check that the certificate was issued by this ca
  cafile: /data/db/ca.pem
  certpassword: 
service:
  # by default with create a headless service named mongo
  # so each node can be accessed directly using mongo-0.mongo and mongo-1.mongo and so on
  # To expose those using ingress controller or public ip enable this.
  enabled: false
  type: NodePort # NodePort or LoadBalancer , if external has values this will always be type LoadBalancer
  domainprefix: # Domain prefix used for each public ip
  external: []
    # to create a service with a dedicated ip per replica, add each IP here. ORder matter,
    #  the first will be set assigned to mongo-0, the second to mongo-1 and so on
    # - ip: 35.205.110.242
    #   port: 27017
    # - ip: 35.205.110.242
    #   port: 27017
ingress:
  # to use IngressRouteTCP to access hosts enable service above and this.
  # IngressRouteTCP can only inspect hostnames when using TLS, so make sure lets encrypt is configure and fill out certResolver name
  # and either create a dedicated port, and use a port with ssl support, normally called websecure
  enabled: false
  domainprefix: # Domain prefix used for ingress rule
  tlspassthrough: false
  certResolver: 
  externalport: 443 # used for generating connection strings, what port is the entryPoint mapped to ?
  entryPoints:
   - websecure
snap: # enable pre-confiured snapsht schedule and easy support for starting a restore mongodb, using https://backube.github.io/snapscheduler
  enabled: false
  # to easily access a snapshot, get snapshot name using kubectl get volumesnapshots
  # then add it to restoresnap below, this will spinup a mongorestore pod, with mongodb running using the snapshot
  restoresnap:
  retention: # specified in hours. (168h = 1 week)
  maxCount: # The maximum number of snapshots per PVC to keep
  # The cronspec (https://en.wikipedia.org/wiki/Cron#Overview)
  # that defines the schedule. It is interpreted with
  # respect to the UTC timezone. The following pre-defined
  # shortcuts are also supported: @hourly, @daily, @weekly,
  # @monthly, and @yearly
  # to help generate syntax, see https://crontab.guru/
  schedule: "0 * * * *"
  # The SnapshotClassName to use when creating the
  # snapshots. If omitted, the cluster default will
  # be used.
  snapshotClassName: 
  # claimSelector: {}
  claimSelector:
    app: mongo
  snapshotclass:
    create: false
    driver: pd.csi.storage.gke.io